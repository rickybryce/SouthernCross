; Scoreboard Program
; I pasted parts of SCM18_Include.asm
; Assembles using AZ80 Assembler by William C Colley III

; + OR - INCREMENTS OR DECREMENTS LEFT PLAYER SCORE
; B OR F INCREMENTS OR DECREMENTS RIGHT PLAYER SCORE
; 0 on the keypad will reset the counter to zero.

;  -- Ricky Bryce


    ORG $2000
    
    
; ** BEGIN INITIALIZE **    
INIT: ; INITIALIZE REGISTERS AND MEMORY
    ; A IS THE 8 BIT ACCUMULATOR. THE AF REGISTER IS A PAIR,
    ; BUT NOT USED AS A PAIR BECAUSE F CONTAINS STATUS FLAGS
    ; IN OTHER WORDS A AND F ARE USED SEPARATELY AS BYTES
    LD A,0 ; ACCUMULATOR
    LD DE,0 ; NOT USED HERE (CAN HOLD 16 BIT ADDRESSES)
    LD HL,0 ; 16 BIT REGISTER (FOR MEMORY ADDRESSES)
    LD BC,0 ; NOT USED HERE (16 BIT BYTE COUNTER)
    LD IX,COUNTER
    LD (IX+0),A ; RIGHT PLAYER SCORE
    LD (IX+1),A ; LEFT PLAYER SCORE
    LD (IX+2),A ; SPARE
    LD (IX+3),A ; SPARE
    LD (KEYVALUE+0),A
    LD (KEYVALUE+1),A
    LD C,CLRBUF             ; CLEAR DISPLAY BUFFER
    CALL SYSTEM             ; SYSTEM CALL
; *** END INITILIALIZE ***


; *** WAIT FOR KEYPRESS ***   
BEGIN:
    LD C,CLRBUF          ;CLEAR DISPLAY BUFFER
    CALL SYSTEM          ; SYSTEM CALL
    LD HL,(COUNTER)      ; LOAD HL WITH COUNTER VALUE
    LD C,DISADD          ; ADD VALUE TO DISPLAY BUFFER CONVERTING TO 7 SEGMENT
    CALL SYSTEM
    LD C, SCAND          ; SCAN THE DISPLAY
    CALL SYSTEM
    LD C, SKEYIN         ; SKEYIN -- SCAN UNTIL KEY PRESSED
    CALL SYSTEM          ; SYSTEM CALL
    LD (KEYVALUE),A      ; LOAD KEYVALUE WITH ACCUMULATOR (DEFINED AT BOTTOM OF PROGRAM)
    JP KEYS
HANDLED:
    LD HL,(COUNTER)     ; LOAD HL WITH KEYVALUE (REQUIRED BY DISADD)
    LD C,DISADD          ; DISADD -- ADD NUMBER TO DISPLAY BUFFER, CONVERTING TO 7 SEGMENT
    CALL SYSTEM          ; SYSTEM CALL
    LD C,SKEYRL          ; SKEYREL -- SCAN UNTIL KEY RELEASED
    CALL SYSTEM          ; SYSTEM CALL
    JP BEGIN             ; REPEAT
    
; *** END WAIT FOR KEYPRESS *** 


; *** BEGIN HANDLEKEYS ***
KEYS:

    LD A,(KEYVALUE)     ; LOAD A WITH KEYVALUE MEMORY
    CP $12              ; CHECK FOR +
    JP Z,LEFTPLUS
    CP $13              ; CHECK FOR -
    JP Z,LEFTMINUS
    CP $0B              ; CHECK FOR B (INCRMENT RIGHT COUNTER)
    JP Z,RIGHTPLUS
    CP $0F              ; CHECK FOR F (DECREMENT RIGHT COUNTER)
    JP Z,RIGHTMINUS
    CP $00              ; CHECK FOR 0 (RESET COUNTS TO ZERO)
    JP Z,CLEARCOUNTS
    LD C,BEEP
    CALL SYSTEM
    LD C,BEEP
    CALL SYSTEM
    JP BEGIN
    
LEFTPLUS:
    LD A,(IX+1)      ; LOAD ACCUMULATOR WITH LOWER BYTE INTENDED FOR DISPLAY
    INC A            ; INCREMENT LOWER BYTE
    LD (IX+1),A      ; SAVE ACCUMULATOR TO LOWER BYTE
    AND $0F          ; MASK OUT UPPER NYBBLE
    CP $0A           ; CHECK FOR > 0
    JP NZ,HANDLED    ; IF NOT YET $0A, CONTINUE
    LD A,(IX+1)      ; RELOAD ACCUMULATOR WITH LOWER BYTE
    ADD A,6          ; IF > 9 THEN ADD 6 (COUNT IN DEC)
    LD (IX+1),A      ; STORE ACCUMULATOR TO LOWER BYTE
    AND $F0          ; MASK OUT LOWER NYBBLE
    CP $A0           ; CHECK TO SEE IF HIGH NYBBLE IS A-F
    JP NZ,HANDLED    ; IF NOT, THEN CONTINUE
    LD A,0           ; LOAD ACCUMULATOR WITH ZERO
    LD (IX+1),A      ; RESET LEFT COUNTER TO ZERO
    LD C,BEEP
    CALL SYSTEM
    LD C,BEEP
    CALL SYSTEM
    JP HANDLED
LEFTMINUS:
    LD A,(IX+1)      ; LOAD ACCUMULATOR WITH LOWER BYTE INTENDED FOR DISPLAY
    DEC A            ; INCREMENT LOWER BYTE
    LD (IX+1),A      ; SAVE ACCUMULATOR TO LOWER BYTE
    AND $0F          ; MASK OUT UPPER NYBBLE
    CP $0F           ; CHECK FOR > 0
    JP NZ,HANDLED    ; IF NOT YET $0A, CONTINUE
    LD A,(IX+1)      ; RELOAD ACCUMULATOR WITH LOWER BYTE
    SUB 6          ; IF > 9 THEN ADD 6 (COUNT IN DEC)
    LD (IX+1),A      ; STORE ACCUMULATOR TO LOWER BYTE
    AND $F0          ; MASK OUT LOWER NYBBLE
    CP $F0           ; CHECK TO SEE IF HIGH NYBBLE IS A-F
    JP NZ,HANDLED    ; IF NOT, THEN CONTINUE
    LD A,0           ; LOAD ACCUMULATOR WITH ZERO
    LD (IX+1),A      ; RESET LEFT COUNTER TO ZERO
    LD C,BEEP
    CALL SYSTEM
    LD C,BEEP
    CALL SYSTEM
    JP HANDLED
RIGHTPLUS:
    LD A,(IX+0)      ; LOAD ACCUMULATOR WITH LOWER BYTE INTENDED FOR DISPLAY
    INC A            ; INCREMENT LOWER BYTE
    LD (IX+0),A      ; SAVE ACCUMULATOR TO LOWER BYTE
    AND $0F          ; MASK OUT UPPER NYBBLE
    CP $0A           ; CHECK FOR > 0
    JP NZ,HANDLED  ; IF NOT YET $0A, CONTINUE
    LD A,(IX+0)      ; RELOAD ACCUMULATOR WITH LOWER BYTE
    ADD A,6          ; IF > 9 THEN ADD 6 (COUNT IN DEC)
    LD (IX+0),A      ; STORE ACCUMULATOR TO LOWER BYTE
    AND $F0          ; MASK OUT LOWER NYBBLE
    CP $A0           ; CHECK TO SEE IF HIGH NYBBLE IS A-F
    JP NZ,HANDLED  ; IF NOT, THEN CONTINUE
    LD A,0           ; LOAD ACCUMULATOR WITH ZERO
    LD (IX+0),A      ; RESET LEFT COUNTER TO ZERO
    LD C,BEEP
    CALL SYSTEM
    LD C,BEEP
    CALL SYSTEM
    JP HANDLED
RIGHTMINUS:
    LD A,(IX+0)      ; LOAD ACCUMULATOR WITH LOWER BYTE INTENDED FOR DISPLAY
    DEC A            ; INCREMENT LOWER BYTE
    LD (IX+0),A      ; SAVE ACCUMULATOR TO LOWER BYTE
    AND $0F          ; MASK OUT UPPER NYBBLE
    CP $0F           ; CHECK FOR > 0
    JP NZ,HANDLED    ; IF NOT YET $0A, CONTINUE
    LD A,(IX+0)      ; RELOAD ACCUMULATOR WITH LOWER BYTE
    SUB 6          ; IF > 9 THEN ADD 6 (COUNT IN DEC)
    LD (IX+0),A      ; STORE ACCUMULATOR TO LOWER BYTE
    AND $F0          ; MASK OUT LOWER NYBBLE
    CP $F0           ; CHECK TO SEE IF HIGH NYBBLE IS A-F
    JP NZ,HANDLED    ; IF NOT, THEN CONTINUE
    LD A,0           ; LOAD ACCUMULATOR WITH ZERO
    LD (IX+0),A      ; RESET LEFT COUNTER TO ZERO
    LD C,BEEP
    CALL SYSTEM
    LD C,BEEP
    CALL SYSTEM
    JP HANDLED

CLEARCOUNTS:
    LD A,0          ; LOAD ACCUMULATOR WITH 0
    LD (IX+0),A     ; CLEAR RIGHT COUNTER
    LD (IX+1),A     ; CLEAR LEFT COUNTER
    LD C,BEEP
    CALL SYSTEM
    LD C,BEEP    
    CALL SYSTEM
    JP HANDLED
; *** END HANDLEKEYS *** 




KEYVALUE:
    DB $00,$00
    
COUNTER:
    DB $00,$00,$00,$00
    
; Pasted some code out of the monitor definitions file.
; This is not the whole file.
; to obtain the file, visit:
; https://github.com/crsjones/Southern-Cross-Computer-z80/tree/main/SouthernCrossSBC_Monitor/SCMonitorV18
;--------------------------------------------
; S O U T H E R N   C R O S S   M O N I T O R
;--------------------------------------------
;
;  MONITOR DEFINITIONS FILE 
;  Version 1.8
;
; WRITTEN BY CRAIG R. S. JONES
; MELBOURNE, AUSTRALIA.
;
;--------------------
; SYSTEM CALL NUMBERS
;--------------------
;
;  LD   C,SYSTEM CALL NUMBER
;  RST  30H
;
SYSTEM: EQU $30
MAIN:	EQU	0	;RESTART MONITOR
VERS:	EQU	1	;RETURNS MONITOR VERSION
DISADD:	EQU	2	;ADDRESS -> DISPLAY BUFFER
DISBYT:	EQU	3	;DATA -> DISPLAY BUFFER
CLRBUF:	EQU	4	;CLEAR DISPLAY BUFFER
SCAND:  EQU	5	;SCAN DISPLAY
CONBYT:	EQU	6	;BYTE -> DISPLAY CODE
CONVHI:	EQU	7	;HI NYBBLE -> DISPLAY CODE
CONVLO:	EQU	8	;LO NYBBLE - > DISPLAY CODE
SKEYIN:	EQU	9	;SCAN DISPLAY UNTIL KEY PRESS
SKEYRL:	EQU	10	;SCAN DISPLAY UNTIL KEY RELEASE
KEYIN:	EQU	11	;WAIT FOR KEY PRESS
KEYREL:	EQU	12	;WAIT FOR KEY RELEASE
MENU:	EQU	13	;SELECT ENTRY FROM MENU
CHKSUM:	EQU	14	;CALCULATE CHECKSUM
MUL16:	EQU	15	;16 BIT MULTIPLY
RAND:	EQU	16	;GENERATE RANDOM NUMBER
INDEXB:	EQU	17	;INDEX INTO BYTE TABLE
INDEXW:	EQU	18	;INDEX INTO WORD TABLE
MUSIC:	EQU	19	;PLAY MUSIC TABLE
TONE:	EQU	20	;PLAY A NOTE
BEEP:	EQU	21	;KEY ENTRY BEEP
SKATE:	EQU	22	;SCAN 8X8 DISPLAY
TXDATA:	EQU	23	;TRANSMIT SERIAL BYTE
RXDATA:	EQU	24	;RECEIVE SERIAL BYTE
ASCHEX:	EQU	25	;ASCII CODE -> HEX
WWATCH:	EQU	26	;WRITE TO SMART WATCH
RWATCH:	EQU	27	;READ FROM SMART WATCH
ONESEC:	EQU	28	;ONE SECOND DELAY USING SMARTWATCH
RLSTEP:	EQU	29	;RELAY SEQUENCER
DELONE:	EQU	30	;ONE SECOND DELAY LOOP
SCANKEY: EQU	31	;SCAN THE KEYBOARD
INTELH:	EQU	32	;RECEIVE INTEL HEX FILE
SPLIT:	EQU	33	;SEPARATE A BYTE INTO NYBBLES
SNDMSG:	EQU	34	;SND ZERO TERMINATED STRING TO SERIAL PORT
BITASC:	EQU	35	;CONVERT A BYTE INTO AN ASCII STRING OF ONES AND ZEROES
WRDASC:	EQU	36	;CONVERT A WORD TO ASCII
BYTASC:	EQU	37	;CONVERT A BYTE TO ASCII
NYBASC:	EQU	38	;CONVERT A NYBBLE TO ASCII
PCBTYP:	EQU	39	;RETURNS BOARD TYPE, SC OR TEC-1F
PRNTSZ:	EQU	40	;INLINE SERIAL PRINT STRING
KBDTYP:	EQU	41	;RETURNS KEYBOARD TYPE
UPDATE:	EQU	42  ;UPDATE DISPLAY AND MODE DECIMAL POINT SEGMENTS
VARRAM:	EQU	43	;RETURN BASE VARIABLE ADDRESS
SERINI:	EQU	44	;INITIALISE BIT BANG SERIAL PORT
SCBUG:	EQU	45	;SCBUG SERIAL MONITOR

;END OF INCLUDE FILE
    END

