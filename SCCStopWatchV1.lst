                        ; STOPWATCH PROGRAM FOR SOUTHERN CROSS COMPUTER (Z80)
                        ; V 3.0 -- USING Z80ASM ASSEMBLER (SLR SYSTEMS-1983)
                        ; -- RICKY BRYCE
                        
                        
                        ; TO SET BAUD RATE ON RC2014 (SERIAL B):
                        ; SET CLOCK 2 TO .3072 --  4800 BAUD
                        
                        ; TO CREATE HEX, TYPE Z80ASM FILENAME/H
                        ; EXTENSION .Z80 IS ASSUMED
                        ; FULL LIST FILE: Z80ASM FILENAME/F
                        
                        ; TO TO TRANSMIT PRG TO SOUTHERN CROSS:
                        ; USE QTERM (CTRL-Y THEN P)
                        ; QTERM VERSION WILL TX/RX THROUGH SERIAL B
                        
                        ; BE SURE TO CROSSOVER TX/RX IN CABLE
                        
   2000                     ORG 2000H
                            
                        ; DEFINE PRESETS FOR DELAY LOOP
                        ; TO INCREMENT EVERY SECOND (TRIAL AND ERROR)
                        
                        ; ** BEGIN HEAD **
                        ; THESE SETTINGS WILL COARSE ADJUST CLOCK CALIBRATION
                        ; FOR FINER TUNING USE NOPS IN DELAY LOOP
   0003                 DELAYLOW: EQU 03H	    ; DELAY LOW BYTE START 51H
   0000                 DELAYHIGH: EQU 00H; 	; DELAY HIGH BYTE START 01H
                        ; ** END HEAD **
                        
                        ; ** BEGIN INTRO **
   2000                 INTRO:
   2000   06 ff             LD B,0FFH       ; START B AT $FF
   2002   21 02 00          LD HL,0002H     ; TONE DURATION
   2005                 INTLOOP:
   2005   3e 3f             LD A,3FH        ; SET A FOR 6 DISPLAYS AT ONCE
   2007   d3 85             OUT (85H),A     ; THEN TURN THEM ON
   2009   78                LD A,B          ; LOAD LOOP VALUE TO A
   200a   d3 84             OUT (84H),A     ; SEND THIS TO THE DISPLAYS
   200c   0e 14             LD C,TONE       ; THEN SOUND A TONE FOR THIS VALUE
   200e   f7                RST SYSTEM
   200f   10 f4             DJNZ INTLOOP
                        ; ** END INTRO **
                        
                        ; ** BEGIN INITIALIZE **    
   2011                 INIT: ; INITIALIZE REGISTERS AND MEMORY
   2011   3e 00             LD A,0  ; ZERO ACCUMULATOR
   2013   11 00 00          LD DE,0 ; NOT USED HERE (CAN HOLD 16 BIT ADDRESSES)
   2016   21 00 00          LD HL,0 ; 16 BIT REGISTER (FOR MEMORY ADDRESSES)
   2019   01 00 00          LD BC,0 ; USED FOR DELAYS
   201c   dd 21 02 23       LD IX,SECOND ; IX AND IY ARE INDEX REGISTERS
   2020   dd 77 00          LD (IX+0),A ; FIRST DIGIT
   2023   dd 77 01          LD (IX+1),A ; SECOND DIGIT
   2026   dd 77 02          LD (IX+2),A ; THIRD DIGIT (NOT USED)
   2029   dd 77 03          LD (IX+3),A ; FOURTH DIGIT (NOT USED)
   202c   32 04 23          LD (HUNDREDTH),A    ; ZERO HUNDREDTHS
   202f   dd 21 00 23       LD IX,DELAYTIME     ; IX AND IY ARE INDEX REGISTERS
   2033   dd 36 00 03       LD (IX+0),DELAYLOW  ; HIGH BYTE DELAY LOOP
   2037   dd 36 01 00       LD (IX+1),DELAYHIGH ; LOW BYTE DELAY LOOP
                        
   203b   0e 04             LD C,CLRBUF		; CLRBUF CLEARS DISPLAY BUFFER (FUNCTION CODE $04)
   203d   f7                RST SYSTEM		; SYSCALL (MONITOR ENTRY POINT)
   203e   21 00 00          LD HL,0000H		; SET UP TO DISPLAY 0
   2041   0e 02             LD C,DISADD		; CONVERT/ADD TO DISPLAY BUFFER
   2043   f7                RST SYSTEM		; CALL THE SYSTEM
   2044   3e 02             LD A,02H		; MODES: 1=RUN, 2=STOP, 3=RESET
   2046   32 06 23          LD (WTMODE),A	; SAVE MODE 2 TO MEMORY
   2049   3e 00             LD A,00H		; LOAD A WITH 0H
   204b   32 08 23          LD (RSTREQ),A	; BE SURE RESET REQUEST IS KILLED
                        ; ** END INITIALIZE **    
                           
                        ; ** BEGIN MAIN ROUTINE **
   204e                 BEGIN:
                        
   204e   cd 28 21          CALL DELAY		; DELAY TO CALIBRATE FOR SECONDS
                        
   2051                 HUNDREDTHS:
   2051   3a 04 23          LD A,(HUNDREDTH)	 ; LOAD ACCUMULATOR WITH HUNDREDTHS
   2054   3c                INC A		         ; INCREMENT LOWER BYTE
   2055   27                DAA                  ; ACCOUNT FOR DECIMAL
   2056   32 04 23          LD (HUNDREDTH),A	 ; RESET HUNDREDTHS
   2059   c2 4e 20          JP NZ,BEGIN          ; GO BACK TO BEGIN IF NO CARRY
   205c   3f                CCF
                            
   205d   cd 7c 21          CALL CLKTONE         ; SOUND TONE
                            
                        
   2060                 FIRSTDIGIT:
   2060   3a 02 23          LD A,(SECOND)	     ; LOAD ACCUMULATOR WITH LOWER 
                                                 ; BYTE INTENDED FOR DISPLAY
   2063   3c                INC A		         ; INCREMENT LOWER BYTE
   2064   27                DAA                  ; ACCOUNT FOR DECIMAL
   2065   32 02 23          LD (SECOND),A	     ; RESET LOWER BYTE OF SECOND
   2068   c2 4e 20          JP NZ,BEGIN          ; GO BACK TO BEGIN IF NO CARRY
   206b   3f                CCF
                        
                        
                            
   206c                 SECONDDIGIT:
   206c   3a 03 23          LD A,(SECOND+1)	     ; LOAD HIGH BYTE OF SECONDS SECOND TO ACCUMUATOR
   206f   3c                INC A		         ; INCREMENT THE ACCUMULATOR
   2070   27                DAA                  ; ACCOUNT FOR DECIMAL
   2071   32 03 23          LD (SECOND+1),A 	 ; STORE THE INCREMENTED VALUE BACK TO THE HIGH BYTE
   2074   c2 4e 20          JP NZ,BEGIN          ; GO BACK TO BEGIN IF NOT ZERO
   2077   3f                CCF
   2078   3e 00             LD A,0		         ; LOAD 0 TO ACCUMULATOR
   207a   32 02 23          LD (SECOND),A	     ; RESET LOW NYBBLE TO ZERO
   207d   32 03 23          LD (SECOND+1),A	     ; RESET HIGH NYBBLE TO ZERO
   2080   c3 4e 20          JP BEGIN		     ; RESTART
                        ; ** END MAIN ROUTINE **
                        
                        ; ** BEGIN CHECK MDOE SUBROUTINE **
   2083                 MODECHK:  ; MODE 1 = RUN; MODE 2 = STOP (HOLD) ; MODE 3 = RESET
   2083                 MODE3:
   2083   3a 06 23          LD A,(WTMODE)	; LOAD MODE TO A
   2086   fe 03             CP 03H		    ; IF MODE IS 3, WE NEED TO RESET
   2088   c2 a6 20          JP NZ,MODE2		; IF NOT 3 CHECK FOR MODE 2
   208b   3e 02             LD A,02H		; LOAD 02H TO THE ACCUMULATOR
   208d   32 06 23          LD (WTMODE),A	; SET THE MODE TO HALT (02H)
   2090   3e 01             LD A,01H		; LOAD 01H TO ACCUMULATOR
   2092   32 08 23          LD (RSTREQ),A	; NO REASON TO DELAY IF RESETTING
   2095   3e 00             LD A,00H		; LOAD 00H TO ACCUMULATOR
   2097   32 04 23          LD (HUNDREDTH),A
   209a   0e 04             LD C,CLRBUF		; SET C TO CLEAR DISPLAY BUFFER
   209c   f7                RST SYSTEM		; SYSTEM CALL
   209d   21 00 00          LD HL,0000H		; LOAD 0H BACK TO HL
   20a0   22 02 23          LD (SECOND),HL
   20a3   0e 02             LD C,DISADD		; SEND THIS 0 TO DISPLAY BUFFER
   20a5   f7                RST SYSTEM		; SYSTEM CALL
                            ;JP MODERET		; RETURN FROM SUBROUTINE
   20a6                 MODE2:
   20a6   cd c8 20          CALL CHECKKEY	; CHECK FOR KEYPAD INPUT
   20a9   cd b8 20          CALL SCANDS		; SCAN THE DISPLAY
   20ac   3a 06 23          LD A,(WTMODE)	; RELOAD A WITH MODE
   20af   fe 02             CP 02H		    ; IF MODE IS 2, WE NEED TO HOLD
   20b1   ca a6 20          JP Z, MODE2		; HOLD IN LOOP
   20b4   c3 b7 20          JP MODERET		; IF MODE CHANGED, WE CAN RETURN
                        
   20b7                 MODE1:			    ; IF MODE IS 1, WE DON'T NEED TO DO ANYTHING
                        
   20b7                 MODERET:
   20b7   c9                RET
                        ; ** END CHECK MODE SUBROUTINE **
                            
                        ; ** BEGIN SCAN DISPLAY ROUTINE **    
   20b8                 SCANDS:			; SCAN THE DISPLAYS
   20b8   0e 03             LD C,DISBYT
   20ba   3a 04 23          LD A,(HUNDREDTH)
   20bd   f7                RST SYSTEM
   20be   0e 02             LD C,DISADD		; DISADD CONVERT AND ADD TO DISPLAY BUFFER
   20c0   2a 02 23          LD HL,(SECOND)	; DATA TO BE DISPLAYED (2 BYTES)
   20c3   f7                RST SYSTEM		; SYSCALL (MONITOR ENTRY POINT)
   20c4   0e 05             LD C,SCAND		; SCAN DISPLAY -- FUCNTION CODE $05
   20c6   f7                RST SYSTEM		; SYSCALL (MONITOR ENTRY POINT)
   20c7   c9                RET
                        ; ** END SCAN DISPLAY ROUTINE **
                        
                        ; ** BEGIN CHECKKEY ROUTINE TO SEE IF A KEY IS PRESSED **
   20c8                 CHECKKEY:
   20c8   db 86             IN A,(86H)	    	; INPUT FROM KEYPAD AT PORT $86
   20ca   cb 6f             BIT 5,A             ; CHECK STATUS BIT OF KEYPAD
   20cc   c2 d7 20          JP NZ,CHECKKEYCNT1  ; IF KEY PRESSED JUMP OVER RETURN
   20cf   3e 00             LD A,00H		    ; LOAD 0H TO ACCUMULATOR
   20d1   32 07 23          LD (KEYONS),A 	    ; CLEAR ONE SHOT BIT IF NO KEY PRESSED
   20d4   c3 27 21          JP CHECKKEYRET      ; IF NO KEY PRESSED, THEN WE RETURN
   20d7                 CHECKKEYCNT1:
                            ; AT THIS POINT, WE KNOW A KEY WAS PRESSED
   20d7   e6 1f             AND 1FH             ; GET RID OF THE UPPER 3 BITS
   20d9   32 05 23          LD (KEYVALUE),A     ; STORE THE KEY PRESSED TO KEYVALUE
   20dc   3a 07 23          LD A,(KEYONS)	    ; LOAD A WITH ONE SHOT VALUE
   20df   b7                OR A                ; CHECK TO SEE IF IT'S CLEARED
   20e0   c2 27 21          JP NZ,CHECKKEYRET   ; KEY IS STILL PRESSED FROM BEFORE
   20e3   3a 05 23          LD A,(KEYVALUE)     ; RESTORE A WITH KEY VALUE
   20e6   fe 12             CP 12H              ; CHECK FOR +
   20e8   c2 f9 20          JP NZ,NOT12H	    ; IF NOT 12H, CHECK FOR 13H
   20eb   cd 60 21          CALL HIGHTONE       ; SOUND HIGH TONE
   20ee   3e 01             LD A,01H		    ; LOAD 01H TO ACCUMULATOR
   20f0   32 06 23          LD (WTMODE),A	    ; SET MODE TO RUN
   20f3   32 07 23          LD (KEYONS),A	    ; SET ONE SHOT VALUE HIGH
   20f6   c3 27 21          JP CHECKKEYRET      ; RETURN FROM SUBROUTINE
   20f9                 NOT12H:
   20f9   3a 05 23          LD A,(KEYVALUE)     ; RELOAD KEY VALUE INTO A
   20fc   fe 13             CP 13H              ; CHECK FOR -
   20fe   c2 11 21          JP NZ,NOT13H	    ; IF NOT 13, CHECK FOR 0        
   2101   cd 6e 21          CALL LOWTONE        ; SOUND LOW TONE
   2104   3e 02             LD A,02H		    ; LOAD 02H TO ACCUMULATOR
   2106   32 06 23          LD (WTMODE),A  	    ; ENTER HOLD MODE
   2109   3e 01             LD A,01H		    ; LOAD 01H TO ACCUMULATOR
   210b   32 07 23          LD (KEYONS),A	    ; SET ONE SHOT VALUE HIGH
   210e   c3 27 21          JP CHECKKEYRET      ; RETURN FROM SUBROUTINE
   2111                 NOT13H:
   2111   3a 05 23          LD A,(KEYVALUE)	    ; RELOAD KEYVALUE MEMORY TO A
   2114   b7                OR A                ; COMPARE A TO 0
   2115   c2 20 21          JP NZ,NOKEY         ; KEY PRESSED IS INVALID
   2118   3e 03             LD A,03H		    ; LOAD 03H TO ACCUMULATOR MODE=3
   211a   32 06 23          LD (WTMODE),A	    ; ENTER RESET MODE
   211d   c3 24 21          JP WAITKEYRL        ; TIMER PAUSES WHILE PRESSED
                            
   2120                 NOKEY:                  ; KEYPRESS IS INVALID
   2120   ff                RST BREAK           ; TROUBLESHOOTING
   2121   c3 27 21          JP CHECKKEYRET      ; RETURN FROM SUBROUTINE
                            
   2124                 WAITKEYRL:
   2124   0e 0a             LD C, SKEYRL        ; WAIT FOR KEY RELEASE
   2126   f7                RST SYSTEM
                        
   2127                 CHECKKEYRET:
   2127   c9                RET     ; RETURN TO NEXT INSTRUCTION AFTER THIS CALL
                        ; ** END CHECKKEY ROUTINE TO SEE IF A KEY IS PRESSED **
                        
                        ; ** BEGIN DELAY ROUTINE
   2128                 DELAY:			; DELAY ROUTINE USING BC PAIR
   2128   ed 4b 00 23       LD BC,(DELAYTIME)	; SET BC TO DELAYTIME
   212c                 DELAY1:
   212c   0b                DEC BC		        ; DECREMENT BC PAIR
   212d   3e 00             LD A,00H		    ; LOAD ACCUMULATOR WITH ZERO
   212f   32 08 23          LD (RSTREQ),A	    ; CLEAR KILLDELAY REQUEST
   2132   c5                PUSH BC		        ; BC USED BY SUBROUTINES -- BACK IT UP
   2133   cd c8 20          CALL CHECKKEY	    ; CHECK TO SEE IF A KEY IS PRESSED
   2136   cd 83 20          CALL MODECHK	    ; CHECK TIMER MODE
   2139   cd b8 20          CALL SCANDS   	    ; SCAN THE DISPLAYS
                        
   213c   c1                POP BC		        ; RESTORE BC BEFORE GOING ANYWHERE ELSE
   213d   3a 08 23          LD A,(RSTREQ)  	    ; CHECK TO SEE IF WE NEED DELAY
   2140   b7                OR A              	; SEE IF IT'S OK TO CONTINUE DELAY
   2141   ca 47 21          JP Z, CONTDLY1    	; IF SO, CONTINUE
   2144   c3 5f 21          JP DELAYRET       	; OTHERWISE, RETURN
   2147                 CONTDLY1:
   2147   78                LD A,B		; LOAD A WITH HIGH BYTE OF DLY SECOND
   2148   b1                OR C		; OR WITH C - CHECK FOR ANY HIGH BITS
                            
                            ; NOPS FOR TIME CALIBRATION
   2149   00                NOP
   214a   00                NOP 
   214b   00                NOP
   214c   00                NOP 
   214d   00                NOP 
   214e   00                NOP
   214f   00                NOP 
   2150   00                NOP
   2151   00                NOP 
   2152   00                NOP 
   2153   00                NOP
                            
   2154   00                NOP 
   2155   00                NOP
   2156   00                NOP 
   2157   00                NOP 
   2158   00                NOP
                            
   2159   00                NOP   ; 1 SECOND / 18 MINUTES FAST
   215a   00                NOP 
   215b   00                NOP
                        
                            
   215c   c2 2c 21          JP NZ,DELAY1	; RE-RUN LOOP
                                
                        
   215f                 DELAYRET:
   215f   c9                RET ; ALL DONE WITH DELAY ROUTINE
                        ; ** END DELAY ROUTINE **   
                        
                        ; ** BEGIN HIGH TONE **
   2160                 HIGHTONE:
   2160   21 75 00      	LD HL,0075H	; TONE DURATION
   2163   3e 25         	LD A,25H	; TONE PITCH
   2165   0e 14         	LD C,TONE	; LOAD C WITH TONE FUNCTION CODE
   2167   f7            	RST SYSTEM	; CALL SYSTEM
   2168   3e 15         	LD A,15H	; TONE PITCH
   216a   0e 14         	LD C,TONE	; LOAD C WITH TONE FUNCTION CODE
   216c   f7            	RST SYSTEM	; CALL SYSTEM
   216d   c9            	RET
                        ; ** END HIGH TONE **
                        
                        ; ** BEGIN LOW TONE **
   216e                 LOWTONE:
   216e   21 25 00      	LD HL,0025H	; TONE DURATION
   2171   3e 55         	LD A,55H	; TONE PITCH
   2173   0e 14         	LD C,TONE	; TONE FUNCTION CODE
   2175   f7            	RST SYSTEM	; CALL SYSTEM
   2176   3e 75         	LD A,75H	; TONE PITCH
   2178   0e 14         	LD C,TONE	; TONE FUNCTION CODE
   217a   f7            	RST SYSTEM	; CALL SYSTEM
   217b   c9            	RET
                        ; ** END LOW TONE **
                        
                        ; ** BEGIN CLICKTONE **
   217c                 CLKTONE:    
   217c   21 15 00      	LD HL,0015H	; TONE DURATION
   217f   3e 99         	LD A,99H	; TONE PITCH
   2181   0e 14         	LD C,TONE	; TONE FUNCTION CODE
   2183   f7            	RST SYSTEM	; CALL SYSTEM
   2184   c9            	RET
                        ; ** END CLICKTONE
                        
                        ; ** BEGIN FOOTER (DEFINE BYTES (DB)) **
   2300                     ORG 2300H		; AVOID CROSSING PAGE BOUNDARY
                            
                        ; ** BEGIN DATA TABLES (ARRAYS) **
   2300                 DELAYTIME: 		; FOR DELAY LOOPS
   2300   ff ff             DB 0FFH,0FFH 	; THESE WILL BE OVERWRITTEN WITH 
                        				    ;CONSTANTS DEFINED IN HEADER
                            
   2302                 SECOND: ; DIGITS TO DISPLAY
   2302   00 00             DB 00H,00H 	    ; THESE WILL BE OVERWRITTEN BY SECOND LOGIC 
                                            ; (I'M ONLY USING THE FIRST TWO BYTES RIGHT NOW)
   2304                 HUNDREDTH:
   2304   00                DB 00H
                                               
   2305                 KEYVALUE:           ; STORE KEY VALUE
   2305   00                DB 00H
   2306                 WTMODE:			    ; MEMORY LOCATION FOR STOPWATCH MODE
   2306   00                DB 00H
   2307                 KEYONS:			    ; MEMORY LOCATION FOR ONE SHOT
   2307   00                DB 00H
   2308                 RSTREQ:			    ; MEMORY FLAG FOR RESET REQUEST
   2308   00                DB 00H
                        ; ** END DATA TABLES (ARRAYS) **  
                        
                        ; ** END FOOTER (DEFINE BYTES (DB)) **
                        
                        ; CREATE LABEL (ALIAS) NAMED SYSTEM FOR MONITOR ENTRY POINT
   0030                 SYSTEM: EQU 30H
   0038                 BREAK:  EQU 38H
                        
                           
                        ; Pasted some code out of the monitor definitions file.
                        ; This is not the whole file.
                        ; to obtain the file, visit:
                        ; https://github.com/crsjones/Southern-Cross-Computer-z80/tree/main/SouthernCrossSBC_Monitor/SCMonitorV18
                        ;--------------------------------------------
                        ; S O U T H E R N   C R O S S   M O N I T O R
                        ;--------------------------------------------
                        ;
                        ;  MONITOR DEFINITIONS FILE 
                        ;  Version 1.8
                        ;
                        ; WRITTEN BY CRAIG R. S. JONES
                        ; MELBOURNE, AUSTRALIA.
                        ;
                        ;--------------------
                        ; SYSTEM CALL NUMBERS
                        ;--------------------
                        ;
                        ;  LD   C,SYSTEM CALL NUMBER
                        ;  RST  30H
                        ;
                        
   0000                 MAIN:	EQU	0	;RESTART MONITOR
   0001                 VERS:	EQU	1	;RETURNS MONITOR VERSION
   0002                 DISADD:	EQU	2	;ADDRESS -> DISPLAY BUFFER
   0003                 DISBYT:	EQU	3	;DATA -> DISPLAY BUFFER
   0004                 CLRBUF:	EQU	4	;CLEAR DISPLAY BUFFER
   0005                 SCAND:  EQU	5	;SCAN DISPLAY
   0006                 CONBYT:	EQU	6	;BYTE -> DISPLAY CODE
   0007                 CONVHI:	EQU	7	;HI NYBBLE -> DISPLAY CODE
   0008                 CONVLO:	EQU	8	;LO NYBBLE - > DISPLAY CODE
   0009                 SKEYIN:	EQU	9	;SCAN DISPLAY UNTIL KEY PRESS
   000a                 SKEYRL:	EQU	10	;SCAN DISPLAY UNTIL KEY RELEASE
   000b                 KEYIN:	EQU	11	;WAIT FOR KEY PRESS
   000c                 KEYREL:	EQU	12	;WAIT FOR KEY RELEASE
   000d                 MENU:	EQU	13	;SELECT ENTRY FROM MENU
   000e                 CHKSUM:	EQU	14	;CALCULATE CHECKSUM
   000f                 MUL16:	EQU	15	;16 BIT MULTIPLY
   0010                 RAND:	EQU	16	;GENERATE RANDOM NUMBER
   0011                 INDEXB:	EQU	17	;INDEX INTO BYTE TABLE
   0012                 INDEXW:	EQU	18	;INDEX INTO WORD TABLE
   0013                 MUSIC:	EQU	19	;PLAY MUSIC TABLE
   0014                 TONE:	EQU	20	;PLAY A NOTE
   0015                 BEEP:	EQU	21	;KEY ENTRY BEEP
   0016                 SKATE:	EQU	22	;SCAN 8X8 DISPLAY
   0017                 TXDATA:	EQU	23	;TRANSMIT SERIAL BYTE
   0018                 RXDATA:	EQU	24	;RECEIVE SERIAL BYTE
   0019                 ASCHEX:	EQU	25	;ASCII CODE -> HEX
   001a                 WWATCH:	EQU	26	;WRITE TO SMART WATCH
   001b                 RWATCH:	EQU	27	;READ FROM SMART WATCH
   001c                 ONESEC:	EQU	28	;ONE SECOND DELAY USING SMARTWATCH
   001d                 RLSTEP:	EQU	29	;RELAY SEQUENCER
   001e                 DELONE:	EQU	30	;ONE SECOND DELAY LOOP
   001f                 SCANKEY: EQU	31	;SCAN THE KEYBOARD
   0020                 INTELH:	EQU	32	;RECEIVE INTEL HEX FILE
   0021                 SPLIT:	EQU	33	;SEPARATE A BYTE INTO NYBBLES
   0022                 SNDMSG:	EQU	34	;SND ZERO TERMINATED STRING TO SERIAL PORT
   0023                 BITASC:	EQU	35	;CONVERT A BYTE INTO AN ASCII STRING OF ONES AND ZEROES
   0024                 WRDASC:	EQU	36	;CONVERT A WORD TO ASCII
   0025                 BYTASC:	EQU	37	;CONVERT A BYTE TO ASCII
   0026                 NYBASC:	EQU	38	;CONVERT A NYBBLE TO ASCII
   0027                 PCBTYP:	EQU	39	;RETURNS BOARD TYPE, SC OR TEC-1F
   0028                 PRNTSZ:	EQU	40	;INLINE SERIAL PRINT STRING
   0029                 KBDTYP:	EQU	41	;RETURNS KEYBOARD TYPE
   002a                 UPDATE:	EQU	42  ;UPDATE DISPLAY AND MODE DECIMAL POINT SEGMENTS
   002b                 VARRAM:	EQU	43	;RETURN BASE VARIABLE ADDRESS
   002c                 SERINI:	EQU	44	;INITIALISE BIT BANG SERIAL PORT
   002d                 SCBUG:	EQU	45	;SCBUG SERIAL MONITOR
                        
                        ;END OF PARTIAL INCLUDE FILE
   2309                     END
0019  ASCHEX        0015  BEEP          204e  BEGIN         0023  BITASC    
0038  BREAK         0025  BYTASC        20c8  CHECKKEY      20d7  CHECKKEYCNT1
2127  CHECKKEYRET    000e  CHKSUM        217c  CLKTONE       0004  CLRBUF    
0006  CONBYT        2147  CONTDLY1      0007  CONVHI        0008  CONVLO    
2128  DELAY         212c  DELAY1        0000  DELAYHIGH     0003  DELAYLOW  
215f  DELAYRET      2300  DELAYTIME     001e  DELONE        0002  DISADD    
0003  DISBYT        2060  FIRSTDIGIT    2160  HIGHTONE      2304  HUNDREDTH 
2051  HUNDREDTHS    0011  INDEXB        0012  INDEXW        2011  INIT      
0020  INTELH        2005  INTLOOP       2000  INTRO         0029  KBDTYP    
000b  KEYIN         2307  KEYONS        000c  KEYREL        2305  KEYVALUE  
216e  LOWTONE       0000  MAIN          000d  MENU          20b7  MODE1     
20a6  MODE2         2083  MODE3         2083  MODECHK       20b7  MODERET   
000f  MUL16         0013  MUSIC         2120  NOKEY         20f9  NOT12H    
2111  NOT13H        0026  NYBASC        001c  ONESEC        0027  PCBTYP    
0028  PRNTSZ        0010  RAND          001d  RLSTEP        2308  RSTREQ    
001b  RWATCH        0018  RXDATA        0005  SCAND         20b8  SCANDS    
001f  SCANKEY       002d  SCBUG         2302  SECOND        206c  SECONDDIGIT
002c  SERINI        0016  SKATE         0009  SKEYIN        000a  SKEYRL    
0022  SNDMSG        0021  SPLIT         0030  SYSTEM        0014  TONE      
0017  TXDATA        002a  UPDATE        002b  VARRAM        0001  VERS      
2124  WAITKEYRL     0024  WRDASC        2306  WTMODE        001a  WWATCH    
